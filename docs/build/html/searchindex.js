Search.setIndex({"docnames": ["index", "installation", "private_api", "public_api"], "filenames": ["index.rst", "installation.rst", "private_api.rst", "public_api.rst"], "titles": ["MakkaPakka Documentation", "<strong>Installation</strong>", "<strong>Full API</strong>", "<strong>Public API</strong>"], "terms": {"overview": 0, "instal": 0, "develop": 0, "usag": [0, 1], "compil": [0, 2, 3], "code": [0, 1, 2, 3], "caver": [0, 1], "transpil": [0, 1], "languag": [0, 1], "featur": [0, 1], "introduct": 0, "basic": 0, "head": [0, 2, 3], "data": [0, 2, 3], "label": [0, 2, 3], "section": [0, 2], "metadata": [0, 2, 3], "standard": 0, "librari": 0, "exampl": [0, 1, 2], "log": [0, 1], "stdout": [0, 1, 2], "revers": 0, "tcp": 0, "shell": 0, "process": [0, 1], "phase": [0, 2, 3], "pars": 0, "link": [0, 2, 3], "integr": 0, "structur": [0, 2], "except": 0, "public": [0, 2], "api": 0, "elf": [0, 1], "full": 0, "todo": 0, "index": [0, 2, 3], "makka": [1, 2, 3], "pakka": [1, 2, 3], "onli": 1, "work": 1, "linux": 1, "try": 1, "run": [1, 2, 3], "other": 1, "oper": 1, "system": 1, "i": [1, 2, 3], "distribut": 1, "packag": 1, "pypi": 1, "To": 1, "us": [1, 2, 3], "pip": 1, "makkapakka": 1, "you": 1, "should": [1, 2], "have": [1, 2, 3], "access": 1, "three": 1, "command": 1, "mkpk": [1, 2, 3], "test": 1, "them": [1, 2], "out": 1, "block": 1, "help": 1, "option": [1, 2], "mkpk_filepath": [1, 2, 3], "target_binari": [1, 2], "o": 1, "output": [1, 2], "file": [1, 2, 3], "text": 1, "The": [1, 2, 3], "filepath": [1, 2, 3], "inject": [1, 2], "binari": [1, 2, 3], "n": 1, "patch": [1, 2], "entrypoint": [1, 2], "point": [1, 2], "e": [1, 2], "exit": [1, 2], "v": 1, "verbos": 1, "show": 1, "thi": [1, 2, 3], "messag": 1, "translat": [1, 2], "asm": [1, 2], "requir": 1, "t": [1, 2], "target": [1, 2], "If": [1, 2], "wish": 1, "contribut": 1, "ar": [1, 2], "instruct": 1, "download": 1, "sourc": [1, 2, 3], "set": 1, "up": 1, "dev": 1, "environ": 1, "prerequisit": 1, "python": 1, "3": 1, "10": 1, "netwid": 1, "assembl": 1, "nasm": [1, 2], "clone": 1, "git": 1, "repositori": 1, "configur": 1, "cd": 1, "your": 1, "directori": [1, 2], "http": 1, "github": 1, "com": 1, "pandasarebear": 1, "sh": 1, "At": 1, "can": [1, 2], "from": [1, 2, 3], "within": 1, "python3": 1, "src": 1, "makka_pakka": [1, 2, 3], "py": 1, "defin": 2, "everi": 2, "function": [2, 3], "project": 2, "either": 2, "privat": 2, "It": 2, "highli": 2, "recommend": 2, "document": 2, "instead": 2, "_convert_heading_name_to_typ": 2, "name": [2, 3], "str": [2, 3], "headingtyp": 2, "convert": 2, "string": 2, "its": 2, "associ": 2, "valu": [2, 3], "paramet": [2, 3], "return": [2, 3], "pass": [2, 3], "none": 2, "invalid": 2, "_split_into_head": 2, "mkpkline": 2, "split": [2, 3], "gadget": 2, "A": [2, 3], "object": [2, 3], "contain": 2, "raw": 2, "line": 2, "parse_makka_pakka": [2, 3], "mkpkir": [2, 3], "gener": [2, 3], "an": [2, 3], "intermedi": [2, 3], "represent": [2, 3], "dure": [2, 3], "parse_head": 2, "_extract_args_from_funct": 2, "list": [2, 3], "extract": 2, "arg": 2, "definin": 2, "definit": 2, "g": 2, "func_nam": 2, "ag": 2, "indic": 2, "argument": 2, "_interpret_data_typ": 2, "tupl": [2, 3], "int": [2, 3], "mkpkdatatyp": 2, "interpret": 2, "wa": [2, 3], "found": [2, 3], "rais": 2, "mkpkparsingerror": 2, "when": 2, "couldn": 2, "parse_data": 2, "mkpkdata": 2, "pack": 2, "parse_funct": 2, "mkpkfunction": 2, "strcutur": 2, "parse_gadget": 2, "mkpkgadget": 2, "parse_metadata": 2, "mkpkmetadata": 2, "class": 2, "detect_head": 2, "headingstyl": 2, "enum": 2, "style": 2, "heading_nam": 2, "single_head": 2, "double_head": 2, "type": 2, "which": [2, 3], "expect": 2, "below": 2, "therefor": 2, "how": 2, "_assert_valid_mkpk_nam": 2, "assert": 2, "valid": [2, 3], "debug": 2, "mkpknameerror": 2, "detect_heading_in_lin": 2, "determin": 2, "detect": 2, "where": 2, "no_head": 2, "linker": [2, 3], "_assert_no_conflict_in_data_label": 2, "lh": 2, "rh": 2, "conflict": [2, 3], "_assert_no_conflict_in_funct": 2, "_assert_no_conflict_in_gadget_address": 2, "rop": 2, "memori": [2, 3], "locat": 2, "_combine_mkpkir": 2, "combin": 2, "one": [2, 3], "param": 2, "first": 2, "kept": 2, "second": 2, "lost": 2, "merge_mkpkir": [2, 3], "merg": [2, 3], "singl": [2, 3], "readi": [2, 3], "intend": [2, 3], "call": [2, 3], "result": [2, 3], "parse_with_link": [2, 3], "respons": [2, 3], "sever": [2, 3], "check": [2, 3], "do": [2, 3], "conflit": [2, 3], "ropgadget": [2, 3], "address": [2, 3], "all": [2, 3], "parse_link_and_merg": [2, 3], "main": [2, 3], "pakkka": [2, 3], "recurs": [2, 3], "direct": [2, 3], "repres": [2, 3], "been": [2, 3], "depend": [2, 3], "0": [2, 3], "remark": [2, 3], "each": [2, 3], "ir": [2, 3], "assign": [2, 3], "attribut": [2, 3], "link_depth": [2, 3], "specifi": [2, 3], "number": [2, 3], "between": [2, 3], "1": [2, 3], "linker_path": 2, "linkerpath": 2, "mkpk_main_filepath": 2, "store": 2, "path": [2, 3], "search": 2, "find": [2, 3], "linkabl": 2, "add_path_to_link": 2, "dir_path": 2, "prioriti": 2, "prioritytyp": 2, "add": 2, "give": 2, "new": 2, "find_mkpk_fil": 2, "mkpk_filenam": 2, "iter": 2, "through": 2, "basenam": 2, "multipl": 2, "same": 2, "higher": 2, "select": 2, "resolv": 2, "absolut": 2, "filenam": 2, "process_makka_pakka": [2, 3], "mkpkcode": [2, 3], "ha": [2, 3], "data_replac": 2, "_extract_data_refer": 2, "code_lin": 2, "mani": 2, "refer": 2, "format": [2, 3], "were": 2, "_extract_label_from_refer": 2, "data_refer": 2, "appl": 2, "would": 2, "_replace_reference_with_valu": 2, "replac": 2, "archiv": 2, "process_data_replac": 2, "ani": 2, "correspond": 2, "For": 2, "num": 2, "my_func": 2, "mov": 2, "rax": 2, "Will": 2, "becom": 2, "function_replac": 2, "_assert_correct_num_of_arg": 2, "curr_func": 2, "passed_arg": 2, "mkpkargumentset": 2, "equal": 2, "_get_function_by_name_or_assert": 2, "get": [2, 3], "processingerror": 2, "_get_line_as_function_cal": 2, "mkpkfunctioncal": 2, "attempt": 2, "retrun": 2, "_get_ref_value_from_argu": 2, "func": 2, "": 2, "program": 2, "These": 2, "make": 2, "exist": 2, "mkpkprocessingerror": 2, "_parse_line_as_function_cal": 2, "process_function_replac": 2, "func_1": 2, "2": 2, "arg1": 2, "ecx": 2, "execut": 2, "_format_code_into_asm_funct": 2, "assembli": 2, "_start": 2, "so": 2, "standalon": 2, "obj": 2, "_translate_mkpkdata_to_asm": 2, "_write_code_to_fil": 2, "output_filepath": [2, 3], "write": [2, 3], "random": [2, 3], "tmp": [2, 3], "uuid": [2, 3], "written": [2, 3], "integrate_makka_pakka": [2, 3], "elf_cav": [2, 3], "code_cav": [2, 3], "_get_end_of_sect": 2, "offset": [2, 3], "end": 2, "final": 2, "_get_end_of_seg": 2, "segment": 2, "_get_executable_seg": 2, "filter": 2, "just": 2, "those": 2, "flag": 2, "_get_last_section_in_seg": 2, "last": 2, "get_code_cav": [2, 3], "cave": [2, 3], "size": [2, 3], "file_permiss": 2, "is_execut": 2, "bool": 2, "true": 2, "permiss": 2, "integ": 2, "is_writ": 2, "writabl": 2, "permission_to_str": 2, "form": 2, "rw": 2, "rx": 2, "print_elf": 2, "pprint_head": 2, "print": 2, "header": 2, "readabl": 2, "pprint_sect": 2, "tabl": 2, "pprint_seg": 2, "table_formatt": 2, "print_tabl": 2, "column": 2, "kwarg": 2, "dict": 2, "pretti": 2, "order": 2, "length": 2, "must": 2, "align": 2, "desir": 2, "left": 2, "right": 2, "centr": 2, "lead": 2, "trail": 2, "space": 2, "appli": 2, "entri": 2, "befor": 2, "pad": 2, "blank": 2, "top": 2, "dynam": 2, "calcul": 2, "variad": 2, "two": 2, "table_rows_to_column": 2, "row": 2, "convieni": 2, "correct": 2, "injector": 2, "binary_injector": 2, "_get_shellcode_from_nasm": 2, "nasm_filepath": 2, "shellcod": 2, "byte": 2, "_inject_shellcode_at_offset": 2, "given": 2, "creat": 2, "inject_nasm_into_binari": 2, "target_binary_filepath": 2, "patch_entrypoint": 2, "whether": 2, "patch_exit": 2, "throw": 2, "insufficientcodecav": 2, "There": 2, "larg": 2, "enough": 2, "mkpkinvalidparamet": 2, "malform": 2, "byte_extract": 2, "extract_byt": 2, "binary_filepath": 2, "hex": 2, "concaten": 2, "continu": 2, "12": 2, "34": 2, "56": 2, "to_little_endian_32bit": 2, "32": 2, "bit": 2, "littl": 2, "endian": 2, "arrai": 2, "target_arch": 2, "architectur": 2, "redirect_execut": 2, "change_entrypoint": 2, "chang": 2, "elf64": 2, "patch_pltsec_exit": 2, "inject_offset": 2, "plt": 2, "sec": 2, "under": 2, "certain": 2, "condit": 2, "compli": 2, "pie": 2, "restrict": 2, "save": 2}, "objects": {"makka_pakka.elf_caver.caver": [[3, 0, 0, "-", "code_caver"], [2, 0, 0, "-", "file_permissions"]], "makka_pakka.elf_caver.caver.code_caver": [[2, 1, 1, "", "_get_end_of_section"], [2, 1, 1, "", "_get_end_of_segment"], [2, 1, 1, "", "_get_executable_segments"], [2, 1, 1, "", "_get_last_section_in_segment"], [3, 1, 1, "", "get_code_caves"]], "makka_pakka.elf_caver.caver.file_permissions": [[2, 1, 1, "", "is_executable"], [2, 1, 1, "", "is_writable"], [2, 1, 1, "", "permission_to_str"]], "makka_pakka.elf_caver.formatting": [[2, 0, 0, "-", "print_elf"], [2, 0, 0, "-", "table_formatter"]], "makka_pakka.elf_caver.formatting.print_elf": [[2, 1, 1, "", "pprint_header"], [2, 1, 1, "", "pprint_sections"], [2, 1, 1, "", "pprint_segments"]], "makka_pakka.elf_caver.formatting.table_formatter": [[2, 1, 1, "", "print_table"], [2, 1, 1, "", "table_rows_to_columns"]], "makka_pakka.elf_caver.injector": [[2, 0, 0, "-", "binary_injector"], [2, 0, 0, "-", "byte_extraction"], [2, 0, 0, "-", "compile"], [2, 0, 0, "-", "redirect_execution"]], "makka_pakka.elf_caver.injector.binary_injector": [[2, 1, 1, "", "_get_shellcode_from_nasm"], [2, 1, 1, "", "_inject_shellcode_at_offset"], [2, 1, 1, "", "inject_nasm_into_binary"]], "makka_pakka.elf_caver.injector.byte_extraction": [[2, 1, 1, "", "extract_bytes"], [2, 1, 1, "", "to_little_endian_32bit"]], "makka_pakka.elf_caver.injector.compile": [[2, 1, 1, "", "compile"]], "makka_pakka.elf_caver.injector.redirect_execution": [[2, 1, 1, "", "change_entrypoint"], [2, 1, 1, "", "patch_pltsec_exit"]], "makka_pakka.integrating": [[3, 0, 0, "-", "integrate"]], "makka_pakka.integrating.integrate": [[2, 1, 1, "", "_format_code_into_asm_function"], [2, 1, 1, "", "_translate_mkpkdata_to_asm"], [2, 1, 1, "", "_write_code_to_file"], [3, 1, 1, "", "integrate_makka_pakka"]], "makka_pakka.linking": [[3, 0, 0, "-", "linker"], [2, 0, 0, "-", "linker_path"]], "makka_pakka.linking.linker": [[2, 1, 1, "", "_assert_no_conflict_in_data_labels"], [2, 1, 1, "", "_assert_no_conflict_in_functions"], [2, 1, 1, "", "_assert_no_conflict_in_gadget_addresses"], [2, 1, 1, "", "_combine_MKPKIRs"], [3, 1, 1, "", "merge_MKPKIRs"], [3, 1, 1, "", "parse_link_and_merge"], [3, 1, 1, "", "parse_with_linking"]], "makka_pakka.linking.linker_path": [[2, 2, 1, "", "LinkerPath"]], "makka_pakka.linking.linker_path.LinkerPath": [[2, 3, 1, "", "add_path_to_linker"], [2, 3, 1, "", "find_mkpk_file"]], "makka_pakka.parsing": [[2, 0, 0, "-", "detect_headings"], [3, 0, 0, "-", "parse"], [2, 0, 0, "-", "parse_headings"]], "makka_pakka.parsing.detect_headings": [[2, 2, 1, "", "HeadingStyle"], [2, 2, 1, "", "HeadingType"], [2, 1, 1, "", "_assert_valid_mkpk_name"], [2, 1, 1, "", "detect_heading_in_line"]], "makka_pakka.parsing.parse": [[2, 1, 1, "", "_convert_heading_name_to_type"], [2, 1, 1, "", "_split_into_headings"], [3, 1, 1, "", "parse_makka_pakka"]], "makka_pakka.parsing.parse_headings": [[2, 1, 1, "", "_extract_args_from_function"], [2, 1, 1, "", "_interpret_data_type"], [2, 1, 1, "", "parse_data"], [2, 1, 1, "", "parse_functions"], [2, 1, 1, "", "parse_gadgets"], [2, 1, 1, "", "parse_metadata"]], "makka_pakka.processing": [[2, 0, 0, "-", "data_replacement"], [2, 0, 0, "-", "function_replacement"], [3, 0, 0, "-", "process"]], "makka_pakka.processing.data_replacement": [[2, 1, 1, "", "_extract_data_references"], [2, 1, 1, "", "_extract_label_from_reference"], [2, 1, 1, "", "_replace_reference_with_value"], [2, 1, 1, "", "process_data_replacement"]], "makka_pakka.processing.function_replacement": [[2, 1, 1, "", "_assert_correct_num_of_args"], [2, 1, 1, "", "_get_function_by_name_or_assert"], [2, 1, 1, "", "_get_line_as_function_call"], [2, 1, 1, "", "_get_ref_value_from_arguments"], [2, 1, 1, "", "_parse_line_as_function_call"], [2, 1, 1, "", "process_function_replacement"]], "makka_pakka.processing.process": [[3, 1, 1, "", "process_makka_pakka"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"makkapakka": 0, "document": 0, "indic": 0, "tabl": 0, "instal": 1, "develop": 1, "full": 2, "api": [2, 3], "pars": [2, 3], "process": [2, 3], "integr": [2, 3], "elf": [2, 3], "caver": [2, 3], "public": 3}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"MakkaPakka Documentation": [[0, "makkapakka-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "Installation": [[1, "installation"], [1, "id1"]], "Development Installation": [[1, "development-installation"]], "Full API": [[2, "full-api"]], "Parsing": [[2, "id1"], [3, "elf-caver"]], "Processing": [[2, "id2"], [3, "id2"]], "Integrating": [[2, "id3"], [3, "id3"]], "ELF Caver": [[2, "id4"], [3, "id4"]], "Public API": [[3, "public-api"]]}, "indexentries": {"headingstyle (class in makka_pakka.parsing.detect_headings)": [[2, "makka_pakka.parsing.detect_headings.HeadingStyle"]], "headingtype (class in makka_pakka.parsing.detect_headings)": [[2, "makka_pakka.parsing.detect_headings.HeadingType"]], "linkerpath (class in makka_pakka.linking.linker_path)": [[2, "makka_pakka.linking.linker_path.LinkerPath"]], "_assert_correct_num_of_args() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement._assert_correct_num_of_args"]], "_assert_no_conflict_in_data_labels() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker._assert_no_conflict_in_data_labels"]], "_assert_no_conflict_in_functions() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker._assert_no_conflict_in_functions"]], "_assert_no_conflict_in_gadget_addresses() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker._assert_no_conflict_in_gadget_addresses"]], "_assert_valid_mkpk_name() (in module makka_pakka.parsing.detect_headings)": [[2, "makka_pakka.parsing.detect_headings._assert_valid_mkpk_name"]], "_combine_mkpkirs() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker._combine_MKPKIRs"]], "_convert_heading_name_to_type() (in module makka_pakka.parsing.parse)": [[2, "makka_pakka.parsing.parse._convert_heading_name_to_type"]], "_extract_args_from_function() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings._extract_args_from_function"]], "_extract_data_references() (in module makka_pakka.processing.data_replacement)": [[2, "makka_pakka.processing.data_replacement._extract_data_references"]], "_extract_label_from_reference() (in module makka_pakka.processing.data_replacement)": [[2, "makka_pakka.processing.data_replacement._extract_label_from_reference"]], "_format_code_into_asm_function() (in module makka_pakka.integrating.integrate)": [[2, "makka_pakka.integrating.integrate._format_code_into_asm_function"]], "_get_end_of_section() (in module makka_pakka.elf_caver.caver.code_caver)": [[2, "makka_pakka.elf_caver.caver.code_caver._get_end_of_section"]], "_get_end_of_segment() (in module makka_pakka.elf_caver.caver.code_caver)": [[2, "makka_pakka.elf_caver.caver.code_caver._get_end_of_segment"]], "_get_executable_segments() (in module makka_pakka.elf_caver.caver.code_caver)": [[2, "makka_pakka.elf_caver.caver.code_caver._get_executable_segments"]], "_get_function_by_name_or_assert() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement._get_function_by_name_or_assert"]], "_get_last_section_in_segment() (in module makka_pakka.elf_caver.caver.code_caver)": [[2, "makka_pakka.elf_caver.caver.code_caver._get_last_section_in_segment"]], "_get_line_as_function_call() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement._get_line_as_function_call"]], "_get_ref_value_from_arguments() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement._get_ref_value_from_arguments"]], "_get_shellcode_from_nasm() (in module makka_pakka.elf_caver.injector.binary_injector)": [[2, "makka_pakka.elf_caver.injector.binary_injector._get_shellcode_from_nasm"]], "_inject_shellcode_at_offset() (in module makka_pakka.elf_caver.injector.binary_injector)": [[2, "makka_pakka.elf_caver.injector.binary_injector._inject_shellcode_at_offset"]], "_interpret_data_type() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings._interpret_data_type"]], "_parse_line_as_function_call() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement._parse_line_as_function_call"]], "_replace_reference_with_value() (in module makka_pakka.processing.data_replacement)": [[2, "makka_pakka.processing.data_replacement._replace_reference_with_value"]], "_split_into_headings() (in module makka_pakka.parsing.parse)": [[2, "makka_pakka.parsing.parse._split_into_headings"]], "_translate_mkpkdata_to_asm() (in module makka_pakka.integrating.integrate)": [[2, "makka_pakka.integrating.integrate._translate_mkpkdata_to_asm"]], "_write_code_to_file() (in module makka_pakka.integrating.integrate)": [[2, "makka_pakka.integrating.integrate._write_code_to_file"]], "add_path_to_linker() (makka_pakka.linking.linker_path.linkerpath method)": [[2, "makka_pakka.linking.linker_path.LinkerPath.add_path_to_linker"]], "change_entrypoint() (in module makka_pakka.elf_caver.injector.redirect_execution)": [[2, "makka_pakka.elf_caver.injector.redirect_execution.change_entrypoint"]], "compile() (in module makka_pakka.elf_caver.injector.compile)": [[2, "makka_pakka.elf_caver.injector.compile.compile"]], "detect_heading_in_line() (in module makka_pakka.parsing.detect_headings)": [[2, "makka_pakka.parsing.detect_headings.detect_heading_in_line"]], "extract_bytes() (in module makka_pakka.elf_caver.injector.byte_extraction)": [[2, "makka_pakka.elf_caver.injector.byte_extraction.extract_bytes"]], "find_mkpk_file() (makka_pakka.linking.linker_path.linkerpath method)": [[2, "makka_pakka.linking.linker_path.LinkerPath.find_mkpk_file"]], "get_code_caves() (in module makka_pakka.elf_caver.caver.code_caver)": [[2, "makka_pakka.elf_caver.caver.code_caver.get_code_caves"], [3, "makka_pakka.elf_caver.caver.code_caver.get_code_caves"]], "inject_nasm_into_binary() (in module makka_pakka.elf_caver.injector.binary_injector)": [[2, "makka_pakka.elf_caver.injector.binary_injector.inject_nasm_into_binary"]], "integrate_makka_pakka() (in module makka_pakka.integrating.integrate)": [[2, "makka_pakka.integrating.integrate.integrate_makka_pakka"], [3, "makka_pakka.integrating.integrate.integrate_makka_pakka"]], "is_executable() (in module makka_pakka.elf_caver.caver.file_permissions)": [[2, "makka_pakka.elf_caver.caver.file_permissions.is_executable"]], "is_writable() (in module makka_pakka.elf_caver.caver.file_permissions)": [[2, "makka_pakka.elf_caver.caver.file_permissions.is_writable"]], "makka_pakka.elf_caver.caver.code_caver": [[2, "module-makka_pakka.elf_caver.caver.code_caver"], [3, "module-makka_pakka.elf_caver.caver.code_caver"]], "makka_pakka.elf_caver.caver.file_permissions": [[2, "module-makka_pakka.elf_caver.caver.file_permissions"]], "makka_pakka.elf_caver.formatting.print_elf": [[2, "module-makka_pakka.elf_caver.formatting.print_elf"]], "makka_pakka.elf_caver.formatting.table_formatter": [[2, "module-makka_pakka.elf_caver.formatting.table_formatter"]], "makka_pakka.elf_caver.injector.binary_injector": [[2, "module-makka_pakka.elf_caver.injector.binary_injector"]], "makka_pakka.elf_caver.injector.byte_extraction": [[2, "module-makka_pakka.elf_caver.injector.byte_extraction"]], "makka_pakka.elf_caver.injector.compile": [[2, "module-makka_pakka.elf_caver.injector.compile"]], "makka_pakka.elf_caver.injector.redirect_execution": [[2, "module-makka_pakka.elf_caver.injector.redirect_execution"]], "makka_pakka.integrating.integrate": [[2, "module-makka_pakka.integrating.integrate"], [3, "module-makka_pakka.integrating.integrate"]], "makka_pakka.linking.linker": [[2, "module-makka_pakka.linking.linker"], [3, "module-makka_pakka.linking.linker"]], "makka_pakka.linking.linker_path": [[2, "module-makka_pakka.linking.linker_path"]], "makka_pakka.parsing.detect_headings": [[2, "module-makka_pakka.parsing.detect_headings"]], "makka_pakka.parsing.parse": [[2, "module-makka_pakka.parsing.parse"], [3, "module-makka_pakka.parsing.parse"]], "makka_pakka.parsing.parse_headings": [[2, "module-makka_pakka.parsing.parse_headings"]], "makka_pakka.processing.data_replacement": [[2, "module-makka_pakka.processing.data_replacement"]], "makka_pakka.processing.function_replacement": [[2, "module-makka_pakka.processing.function_replacement"]], "makka_pakka.processing.process": [[2, "module-makka_pakka.processing.process"], [3, "module-makka_pakka.processing.process"]], "merge_mkpkirs() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker.merge_MKPKIRs"], [3, "makka_pakka.linking.linker.merge_MKPKIRs"]], "module": [[2, "module-makka_pakka.elf_caver.caver.code_caver"], [2, "module-makka_pakka.elf_caver.caver.file_permissions"], [2, "module-makka_pakka.elf_caver.formatting.print_elf"], [2, "module-makka_pakka.elf_caver.formatting.table_formatter"], [2, "module-makka_pakka.elf_caver.injector.binary_injector"], [2, "module-makka_pakka.elf_caver.injector.byte_extraction"], [2, "module-makka_pakka.elf_caver.injector.compile"], [2, "module-makka_pakka.elf_caver.injector.redirect_execution"], [2, "module-makka_pakka.integrating.integrate"], [2, "module-makka_pakka.linking.linker"], [2, "module-makka_pakka.linking.linker_path"], [2, "module-makka_pakka.parsing.detect_headings"], [2, "module-makka_pakka.parsing.parse"], [2, "module-makka_pakka.parsing.parse_headings"], [2, "module-makka_pakka.processing.data_replacement"], [2, "module-makka_pakka.processing.function_replacement"], [2, "module-makka_pakka.processing.process"], [3, "module-makka_pakka.elf_caver.caver.code_caver"], [3, "module-makka_pakka.integrating.integrate"], [3, "module-makka_pakka.linking.linker"], [3, "module-makka_pakka.parsing.parse"], [3, "module-makka_pakka.processing.process"]], "parse_data() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings.parse_data"]], "parse_functions() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings.parse_functions"]], "parse_gadgets() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings.parse_gadgets"]], "parse_link_and_merge() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker.parse_link_and_merge"], [3, "makka_pakka.linking.linker.parse_link_and_merge"]], "parse_makka_pakka() (in module makka_pakka.parsing.parse)": [[2, "makka_pakka.parsing.parse.parse_makka_pakka"], [3, "makka_pakka.parsing.parse.parse_makka_pakka"]], "parse_metadata() (in module makka_pakka.parsing.parse_headings)": [[2, "makka_pakka.parsing.parse_headings.parse_metadata"]], "parse_with_linking() (in module makka_pakka.linking.linker)": [[2, "makka_pakka.linking.linker.parse_with_linking"], [3, "makka_pakka.linking.linker.parse_with_linking"]], "patch_pltsec_exit() (in module makka_pakka.elf_caver.injector.redirect_execution)": [[2, "makka_pakka.elf_caver.injector.redirect_execution.patch_pltsec_exit"]], "permission_to_str() (in module makka_pakka.elf_caver.caver.file_permissions)": [[2, "makka_pakka.elf_caver.caver.file_permissions.permission_to_str"]], "pprint_header() (in module makka_pakka.elf_caver.formatting.print_elf)": [[2, "makka_pakka.elf_caver.formatting.print_elf.pprint_header"]], "pprint_sections() (in module makka_pakka.elf_caver.formatting.print_elf)": [[2, "makka_pakka.elf_caver.formatting.print_elf.pprint_sections"]], "pprint_segments() (in module makka_pakka.elf_caver.formatting.print_elf)": [[2, "makka_pakka.elf_caver.formatting.print_elf.pprint_segments"]], "print_table() (in module makka_pakka.elf_caver.formatting.table_formatter)": [[2, "makka_pakka.elf_caver.formatting.table_formatter.print_table"]], "process_data_replacement() (in module makka_pakka.processing.data_replacement)": [[2, "makka_pakka.processing.data_replacement.process_data_replacement"]], "process_function_replacement() (in module makka_pakka.processing.function_replacement)": [[2, "makka_pakka.processing.function_replacement.process_function_replacement"]], "process_makka_pakka() (in module makka_pakka.processing.process)": [[2, "makka_pakka.processing.process.process_makka_pakka"], [3, "makka_pakka.processing.process.process_makka_pakka"]], "table_rows_to_columns() (in module makka_pakka.elf_caver.formatting.table_formatter)": [[2, "makka_pakka.elf_caver.formatting.table_formatter.table_rows_to_columns"]], "to_little_endian_32bit() (in module makka_pakka.elf_caver.injector.byte_extraction)": [[2, "makka_pakka.elf_caver.injector.byte_extraction.to_little_endian_32bit"]]}})
